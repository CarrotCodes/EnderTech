// vim: expandtab:ts=4:sw=4
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }

        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

repositories {
    ivy {
        name 'Forge FS legacy'
        artifactPattern "http://files.minecraftforge.net/[module]/[module]-dev-[revision].[ext]"
    }

    // Pulsar/Kotlin Adapter
    maven {
        name 'drakon.io'
        url "http://tethys.drakon.io/maven"
    }

    /*maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }

    maven { // the repo from which to get NEI and stuff
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }*/
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'

/*def loadProperties(propsFilename) {
    def props = new Properties()
    new File(propsFilename).withInputStream {
        stream -> props.load(stream)
    }

    return new ConfigSlurper().parse(props)
}*/

//def config = loadProperties("build.properties")
ext.keystore_config = null
ext.keystore = null

if (project.hasProperty("endertech_keystore_dir")) {
    ext.keystore_config = loadProperties(project.endertech_keystore_dir + File.separator + "keystore.properties")
    ext.keystore = project.endertech_keystore_dir + File.separator + ext.keystore_config.key_store
}

def env = System.getenv()

// Get Jenkins metadata
ext.jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins at least.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
    } else {
        attributes("Jenkins-Build": "false")
    }
}
// Get Git metadata (if in Jenkins)
ext.gitManifest = manifest {
    if (env.GIT_BRANCH != null) {
        attributes("Git-Branch": env.GIT_BRANCH, "Git-Hash": env.GIT_COMMIT)
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade "io.drakon:pulsar:${pulsar_version}"
    shade "io.drakon.forge:kotlin-adapter:${kotlin_version}+${minecraft_version}"
    shade "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"

    // Legacy
    //compile name: 'ForgeMultipart', version: "${minecraft_version}-${FMP_version}", ext: 'jar'
    //compile name: 'CodeChickenLib', version: "${minecraft_version}-${CCLIB_version}", ext: 'jar'
    //compile name: 'NotEnoughItems', version: "${NEI_version}", type: 'jar'
    //compile "mcp.mobius.waila:Waila:${waila_version}_${minecraft_version}:dev"
    //compile "codechicken:CodeChickenCore:${minecraft_version}-${ccc_version}:dev"
    //compile "codechicken:CodeChickenLib:${minecraft_version}-${cclib_version}:dev"
    //compile "codechicken:NotEnoughItems:${minecraft_version}-${nei_version}:dev"

    // Dependencies that do not provide an easy way to grab them with Gradle must be included manually
    // List of shame:
    //  CoFHLib
    //  CoFHCore
    //  Thermal Foundation
    //  Thermal Expansion
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

group = "io.endertech"
version = mod_version
archivesBaseName = "EnderTech"

// Add packapi source set
sourceSets.main.java.srcDir "src/packapi/java"
sourceSets.main.resources.srcDir "src/packapi/resources"

task buildInfo {
    if (env.BUILD_NUMBER != null) {
        ext.build_number = "${env.BUILD_NUMBER}"
    } else {
        def tag_cmd = "git rev-parse --short HEAD"
        def tag_proc = tag_cmd.execute()
        tag_proc.waitFor()

        def branch_cmd = "git branch"
        def branch_proc = branch_cmd.execute()
        branch_proc.waitFor()

        if (tag_proc.exitValue() == 0 && branch_proc.exitValue() == 0) {
            ext.build_number = branch_proc.text.split(' ')[1].trim() + "-" + tag_proc.text.trim()
        } else {
            ext.build_number = "unknown"
        }
    }
}

minecraft {
    version = "${minecraft_version}-${forge_version}"
    mappings = mappings_version
    runDir = 'run'

    //replaceIn "reference/Reference.java"

    if (keystore_config != null)
        replace "@FINGERPRINT@", keystore_config.key_sha1

    replace "@VERSION@", "${minecraft_version}-${mod_version}.${project.buildInfo.build_number}"
    replace "@KOTLIN@", kotlin_version
}

reobf {
    jar {
        // Repackage PK lines in repack.srg
        extraFiles file("repack.srg")
    }
}

version = "${minecraft_version}-${mod_version}.${project.buildInfo.build_number}"

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'version.properties'

        expand 'version': project.version, 'build_number': project.buildInfo.build_number, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'version.properties'
    }
}

jar {
    // Grab deps for shading
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }

    // Scrub Kotlin metadata
    exclude '*.kotlin_class'

    // Merge Jenkins and Git manifests to form final manifest in final release jar
    manifest {
        from jenkinsManifest, gitManifest
    }
}

// Dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Add dev jars to master artifacts list
artifacts {
    archives deobfJar
}

// Sign release jar
task signJar(dependsOn: 'jar') {
    inputs.file jar.getArchivePath()
    outputs.file jar.getArchivePath()

    onlyIf {
        return keystore_config != null
    }

    doLast {
        ant.signjar(jar: jar.getArchivePath(),
                alias: keystore_config.key_alias,
                keystore: keystore,
                storepass: keystore_config.key_store_password,
                keypass: keystore_config.key_alias_password,
                destDir: jar.destinationDir)
    }
}

// Maven deployment
apply plugin: 'maven'

if (!project.hasProperty("DEPLOY_DIR")) {
    ext.DEPLOY_DIR = null
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${DEPLOY_DIR}")
        }
    }
}

uploadArchives.onlyIf { return DEPLOY_DIR != null }
